#!/usr/bin/env ruby
#
# Copyright 2015, Steve K. Chiu <steve.k.chiu@gmail.com>
#
# The MIT License (http://www.opensource.org/licenses/mit-license.php)
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# What it does is to scan iOS resources and generate R+assets.swift for
# .xcassets catalog
#

require 'fileutils'
require 'pathname'
require 'optparse'

ARGV << '--help' if ARGV.empty?

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: ios-assets.rb options"

  opts.on("--res=DIRECTORY", "directory for iOS resources") do |v|
    options[:res] = v
  end

  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

res_path = Pathname.new(File.expand_path(options[:res])) if options[:res]

unless res_path
  puts "Error! resource directory not specified"
  exit
end

unless res_path.exist?
  puts "Error! resource directory not found: #{res_path}"
  exit
end

images_keys = {}

res_path.each_entry { |assets|
  next unless assets.fnmatch? '*.xcassets'

  assets_path = res_path + assets
  assets_path.each_entry { |dir|
    next unless dir.fnmatch? '*.imageset'

    key = dir.to_s.gsub(/^(.*)\.imageset$/, '\1')
    images_keys[key] = true
  }
}

images_keys = images_keys.keys.sort

swift_path = res_path + "R+assets.swift"
swift_path.delete if swift_path.exist?

File.open(swift_path, 'wb') { |f|
  f.write "// THIS FILE IS GENERATED BY TOOL, PLEASE DO NOT EDIT!\n\n"
  f.write "import UIKit\n\n"
  f.write "extension R {\n\n"

  if not images_keys.empty?
    f.write "    enum image : String {\n"
    images_keys.each { |key|
      f.write "        case #{key}\n"
    }
    f.write "    }\n\n"
  end

  f.write "}\n\n"

  if not images_keys.empty?
    f.write "postfix operator % {}\n\n"

    f.write "postfix func % (key: R.image) -> UIImage {\n"
    f.write "    return UIImage(named: key.rawValue)!\n"
    f.write "}\n\n"
  end

  puts "#{images_keys.size} images found"
}
